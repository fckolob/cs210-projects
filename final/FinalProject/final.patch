diff --git a/final/FinalProject/Order.cs b/final/FinalProject/Order.cs
index e10ff9b..9271cc3 100644
--- a/final/FinalProject/Order.cs
+++ b/final/FinalProject/Order.cs
@@ -1,61 +1,67 @@
-    public abstract class Order
-    {
-        protected string _nameCustomer;
-        
+// SMT I would expect an Order to manage a list of things (which should be abstracted into there own classes) ordered.
+public abstract class Order
+{
+    // SMT Consider abstracting the customer info into it's own class
+    protected string _nameCustomer;
 
-        protected long _phoneCustomer;
 
-        protected double _totalPrice;
+    protected long _phoneCustomer;
 
-        protected double _amountPaid;
+    protected double _totalPrice;
 
-        protected string _dueDate;
+    protected double _amountPaid;
 
-        protected string _color;
+    protected string _dueDate;
 
-        protected string _addressCustomer;
+    // SMT I'm not sure why Order would have a color. Color should be managed by the item in the Order.
+    protected string _color;
 
-        protected int _widthMm;
+    protected string _addressCustomer;
 
-        protected int _heightMm;
+    // SMT I'm not sure why Order would have a width and height. Those attributes should be managed by the item in the Order.
+    protected int _widthMm;
 
-        protected int _glassThickness;
-        
+    protected int _heightMm;
 
-        protected bool _dvh;
-        protected bool _instalationIncluded;
-        
-        protected bool _delivered;
-        protected bool _remainingAmountPaid;
-        
-        public Order(System.String nameCustomer, System.String addressCustomer, long phoneCustomer, double totalPrice, double amountPaid, int widthMm, int heightMm, System.String color, int glassThickness, bool dvh, string dueDate, bool instalationIncluded)
-        {
-            _nameCustomer = nameCustomer;
-            _addressCustomer = addressCustomer;
-            _phoneCustomer = phoneCustomer;
-            _totalPrice = totalPrice;
-            _amountPaid = amountPaid;
-            _widthMm = widthMm;
-            _heightMm = heightMm;
-            _color = color;
-            _glassThickness = glassThickness;
-            _dvh = dvh;
-            _dueDate = dueDate;
-            _instalationIncluded = instalationIncluded;
-            
-        }
+    // SMT same with glassThickness. Should be managed by the item in the order
+    protected int _glassThickness;
 
-        public Order(System.String savedString)
-        {
-            
-        }
 
-        public double RemainingAmount()
-        {
-            return _totalPrice - _amountPaid;
-        }
+    protected bool _dvh;
+    protected bool _instalationIncluded;
+
+    protected bool _delivered;
+    protected bool _remainingAmountPaid;
+
+    public Order(System.String nameCustomer, System.String addressCustomer, long phoneCustomer, double totalPrice, double amountPaid, int widthMm, int heightMm, System.String color, int glassThickness, bool dvh, string dueDate, bool instalationIncluded)
+    {
+        _nameCustomer = nameCustomer;
+        _addressCustomer = addressCustomer;
+        _phoneCustomer = phoneCustomer;
+        _totalPrice = totalPrice;
+        _amountPaid = amountPaid;
+        _widthMm = widthMm;
+        _heightMm = heightMm;
+        _color = color;
+        _glassThickness = glassThickness;
+        _dvh = dvh;
+        _dueDate = dueDate;
+        _instalationIncluded = instalationIncluded;
+
+    }
+
+    public Order(System.String savedString)
+    {
 
+    }
+
+    // SMT consider passing in the payment to the method.
+    public double RemainingAmount()
+    {
+        return _totalPrice - _amountPaid;
+    }
 
+    // SMT You don't need this since isn't not implmented.
     public override string ToString()
     {
         return base.ToString();
@@ -64,70 +70,70 @@
 
     public abstract string ToSavedString();
 
-        
 
-        public abstract string ProductionWorkSheet();
-        
 
-        public string AdministrationWorkSheet()
+    public abstract string ProductionWorkSheet();
+
+
+    public string AdministrationWorkSheet()
+    {
+        return $"Type of opening: {this.GetType()} \n Name: {_nameCustomer} \n Address: {_addressCustomer} \n Phone number: {_phoneCustomer} \n Total price: ${_totalPrice} \n Amount already paid: ${_amountPaid} \n Remaining amount: ${RemainingAmount()} \n Due date for deliver this opening: {_dueDate} \n {GetInstalationIncludedMessage()} \n {GetDeliveredMessage()} \n {GetRemainingAmountPaidMessage()}";
+    }
+    public string GetName()
+    {
+        return $"Name: {_nameCustomer} Type: {this.GetType()} Measures: width: {_widthMm}mm height: {_heightMm}mm ";
+    }
+    public virtual string GetDvhMessage()
+    {
+        if (_dvh == true)
         {
-            return $"Type of opening: {this.GetType()} \n Name: {_nameCustomer} \n Address: {_addressCustomer} \n Phone number: {_phoneCustomer} \n Total price: ${_totalPrice} \n Amount already paid: ${_amountPaid} \n Remaining amount: ${RemainingAmount()} \n Due date for deliver this opening: {_dueDate} \n {GetInstalationIncludedMessage()} \n {GetDeliveredMessage()} \n {GetRemainingAmountPaidMessage()}";
+            return "This opening will have DVH glass";
         }
-        public string GetName()
+        else
         {
-            return $"Name: {_nameCustomer} Type: {this.GetType()} Measures: width: {_widthMm}mm height: {_heightMm}mm ";
+            return "This opening will have single glass";
         }
-        public virtual string GetDvhMessage()
+    }
+    public string GetInstalationIncludedMessage()
+    {
+        if (_instalationIncluded == true)
         {
-            if (_dvh == true)
-            {
-                return "This opening will have DVH glass";
-            }
-            else
-            {
-                return "This opening will have single glass";
-            }
+            return "The instalation is included for this opening";
         }
-        public string GetInstalationIncludedMessage()
+        else
         {
-            if (_instalationIncluded == true)
-            {
-                return "The instalation is included for this opening";
-            }
-            else
-            {
-                return "The instalation is not included for this opening";
-            }
+            return "The instalation is not included for this opening";
         }
-        public string GetDeliveredMessage()
+    }
+    public string GetDeliveredMessage()
+    {
+        if (_delivered == true)
         {
-            if (_delivered == true)
-            {
-                return "This opening was already delivered";
-            }
-            else
-            {
-                return "This opening is not delivered yet";
-            }
+            return "This opening was already delivered";
         }
-        public string GetRemainingAmountPaidMessage()
+        else
         {
-            if (_remainingAmountPaid == true)
-            {
-                return "The remaining amount for this opening was already paid";
-            }
-            else
-            {
-                return "The remaining amount for this opening is not paid yet";
-            }
+            return "This opening is not delivered yet";
         }
-        public void RecordEventDelivered()
+    }
+    public string GetRemainingAmountPaidMessage()
+    {
+        if (_remainingAmountPaid == true)
         {
-            _delivered = true;
+            return "The remaining amount for this opening was already paid";
         }
-        public void RecordEventRemainingAmountPaid()
+        else
         {
-            _remainingAmountPaid = true;
-            _amountPaid = _totalPrice;
+            return "The remaining amount for this opening is not paid yet";
         }
     }
+    public void RecordEventDelivered()
+    {
+        _delivered = true;
+    }
+    public void RecordEventRemainingAmountPaid()
+    {
+        _remainingAmountPaid = true;
+        _amountPaid = _totalPrice;
+    }
+}
diff --git a/final/FinalProject/SwingingOrder.cs b/final/FinalProject/SwingingOrder.cs
index d15e98f..e22f7f4 100644
--- a/final/FinalProject/SwingingOrder.cs
+++ b/final/FinalProject/SwingingOrder.cs
@@ -1,7 +1,12 @@
 using System.Dynamic;
 
+// SMT alhtough you could say a SwingingOrder is an Order, it seems like this is more of a type of item that could be order that
+// would be managed by an ORder
 public  class SwingingOrder : Order
 {
+    // SMT these attibutes descibe more about an item of an Order rather than an Order. I really don't see a reason to subclass orders
+    // What I would do is create a base class of Window and then subclass window into all your Window classes. Have Order manage a List<Window>
+    // and Customer.
     protected string _openingDirection;
         
     protected string _outOrIn;
